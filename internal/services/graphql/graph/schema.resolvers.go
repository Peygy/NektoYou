package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/peygy/nektoyou/internal/pkg/grpc"
	pbAuth "github.com/peygy/nektoyou/internal/pkg/protos/graph_auth"
	pbToken "github.com/peygy/nektoyou/internal/pkg/protos/graph_token"
	"github.com/peygy/nektoyou/internal/services/graphql/graph/model"
)

func findServiceIndex(services []grpc.GrpcService, name string) int {
	for i, service := range services {
		if service.Name == name {
			return i
		}
	}
	return -1
}

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.UserInput) (*model.AuthPayload, error) {
	authConnIdx := findServiceIndex(r.GrpcServices, "auth_service")
	clAuth := pbAuth.NewSignUpServiceClient(r.GrpcServices[authConnIdx].Conn)

	signUpResponce, err := clAuth.SignUp(ctx, &pbAuth.SignUpRequest{
		Username: input.Username,
		Password: input.Password,
	})
	if err != nil {
		fmt.Print(err)
		return nil, fmt.Errorf("graphql: could not sign up new user: %v", err)
	}

	tokenConnIdx := findServiceIndex(r.GrpcServices, "token_service")
	clToken := pbToken.NewCreateTokensPairServiceClient(r.GrpcServices[tokenConnIdx].Conn)

	tokenPairResponce, err := clToken.CreateTokensPair(ctx, &pbToken.CreateTokensPairRequest{
		UserId: signUpResponce.UserId,
		Roles:  signUpResponce.Roles,
	})
	if err != nil {
		fmt.Print(err)
		return nil, fmt.Errorf("graphql: could not create tokens: %v", err)
	}

	return &model.AuthPayload{
		AccessToken:  tokenPairResponce.GetAccessToken(),
		RefreshToken: tokenPairResponce.GetRefreshToken(),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
