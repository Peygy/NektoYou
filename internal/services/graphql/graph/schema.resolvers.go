package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"sort"

	"github.com/peygy/nektoyou/internal/services/graphql/graph/model"
	pb "github.com/peygy/nektoyou/internal/services/graphql/internal/grpc_client/proto"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.UserInput) (*model.AuthPayload, error) {
	authConnIdx := sort.Search(len(r.GrpcServices), func(i int) bool { return r.GrpcServices[i].Name == "auth_service" })
	cl := pb.NewGreeterClient(r.GrpcServices[authConnIdx].Conn)

	responce, err := cl.SayHello(ctx, &pb.HelloRequest{Word: input.Username+input.Password})
	if err != nil {
		fmt.Print(err)
		return nil, fmt.Errorf("could not say hello: %v", err)
	}

    return &model.AuthPayload{
        AccessToken:  responce.GetMessage(),
        RefreshToken: responce.GetMessage(),
    }, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
